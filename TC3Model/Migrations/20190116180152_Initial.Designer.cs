// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TC3Model.DataModel;

namespace TC3Model.Migrations
{
    [DbContext(typeof(TCContext))]
    [Migration("20190116180152_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TC3Model.DataModel.Classes.History", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Column")
                        .HasMaxLength(32);

                    b.Property<DateTime>("DateChanged");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int?>("OID");

                    b.Property<string>("OriginalValue");

                    b.Property<int>("RecordID");

                    b.Property<byte[]>("RowID")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("Value");

                    b.Property<string>("Who")
                        .HasMaxLength(32);

                    b.HasKey("ID");

                    b.HasIndex("DateChanged", "TableName", "RecordID", "Column")
                        .IsUnique()
                        .HasName("IX_HistoryByDate")
                        .HasFilter("[Column] IS NOT NULL");

                    b.HasIndex("TableName", "RecordID", "DateChanged", "Column")
                        .IsUnique()
                        .HasName("IX_HistoryByRecord")
                        .HasFilter("[Column] IS NOT NULL");

                    b.ToTable("History");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.Image", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlphaSort")
                        .HasMaxLength(132);

                    b.Property<string>("Caption");

                    b.Property<string>("Category")
                        .HasMaxLength(80);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("FileName")
                        .HasMaxLength(80);

                    b.Property<int?>("Height");

                    b.Property<byte[]>("ImageContent")
                        .HasColumnName("Image")
                        .HasColumnType("image");

                    b.Property<string>("Name")
                        .HasMaxLength(80);

                    b.Property<string>("Notes");

                    b.Property<int?>("OID");

                    b.Property<int?>("RecordID");

                    b.Property<byte[]>("RowID")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("TableName")
                        .HasMaxLength(32);

                    b.Property<bool>("Thumbnail");

                    b.Property<byte[]>("ThumbnailImage")
                        .HasColumnName("ThumbnailImage")
                        .HasColumnType("image");

                    b.Property<string>("URL")
                        .HasMaxLength(132);

                    b.Property<int?>("Width");

                    b.HasKey("ID");

                    b.HasIndex("TableName", "RecordID")
                        .IsUnique()
                        .HasName("IX_ImageByRecord")
                        .HasFilter("[TableName] IS NOT NULL AND [RecordID] IS NOT NULL");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.Location", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(1024);

                    b.Property<string>("Name")
                        .HasMaxLength(1024);

                    b.Property<int?>("OID");

                    b.Property<string>("PhysicalLocation")
                        .HasMaxLength(1024);

                    b.Property<byte[]>("RowID")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            ID = -1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Unknown",
                            PhysicalLocation = "Unknown"
                        },
                        new
                        {
                            ID = -2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Unspecified",
                            PhysicalLocation = "N/A"
                        },
                        new
                        {
                            ID = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "?? Ziploc bag",
                            PhysicalLocation = "Unknown"
                        },
                        new
                        {
                            ID = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Applied to Kit",
                            Name = "Applied",
                            PhysicalLocation = "N/A"
                        },
                        new
                        {
                            ID = 3,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #? Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 4,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #144-1 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 5,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #144-2 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 6,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #3 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 7,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #350-1 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 8,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #350-2 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 9,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #700-1 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 10,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #700-2 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 11,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #700-2 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 12,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #700-3 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 13,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #700-4 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 14,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #72-1 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 15,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #72-10 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 16,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #72-11 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 17,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #72-12 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 18,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #72-13 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 19,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #72-14 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 20,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #72-2 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 21,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #72-4 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 22,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #72-5 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 23,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #72-5 Ziploc bag (2nd set, with wheels, left in box)",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 24,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #72-6 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 25,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #72-7 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 26,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #72-8 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 27,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "Box #72-9 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 28,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Car Box #1 Ziploc bag",
                            PhysicalLocation = "N/A"
                        },
                        new
                        {
                            ID = 29,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Decals left in bag",
                            PhysicalLocation = "N/A"
                        },
                        new
                        {
                            ID = 30,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Decals left with detail set included in kit",
                            PhysicalLocation = "N/A"
                        },
                        new
                        {
                            ID = 31,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Decals salvaged",
                            PhysicalLocation = "N/A"
                        },
                        new
                        {
                            ID = 32,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "FreeTime Box #2 [Ken's Room]",
                            PhysicalLocation = "N/A"
                        },
                        new
                        {
                            ID = 33,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "FreeTime Box #3 [Ken's Room]",
                            PhysicalLocation = "N/A"
                        },
                        new
                        {
                            ID = 34,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Included in kit",
                            PhysicalLocation = "N/A"
                        },
                        new
                        {
                            ID = 35,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Inside E-2C Hawkeye Box (Revell 03945 Kit #2640)",
                            PhysicalLocation = "N/A"
                        },
                        new
                        {
                            ID = 36,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "JVC CH-200 Box Ziploc bag",
                            PhysicalLocation = "N/A"
                        },
                        new
                        {
                            ID = 37,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Left in bag",
                            PhysicalLocation = "N/A"
                        },
                        new
                        {
                            ID = 38,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Left in box",
                            PhysicalLocation = "N/A"
                        },
                        new
                        {
                            ID = 39,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "On Order",
                            PhysicalLocation = "N/A"
                        },
                        new
                        {
                            ID = 40,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "SciFi Box #1 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 41,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "SciFi Box #2 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 42,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "SciFi Box #3 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 43,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "SciFi Box #4 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 44,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "SciFi Box #5 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 45,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "SciFi Box #6 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 46,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ziploc Bag",
                            Name = "SciFi Box #7 Ziploc bag",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 47,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Sealed in package",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 48,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Sealed with detail set included in kit",
                            PhysicalLocation = "Ken's Room"
                        },
                        new
                        {
                            ID = 49,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Unboxed [Ken's Room]",
                            PhysicalLocation = "Ken's Room"
                        });
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.ReferenceBase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int?>("OID");

                    b.Property<byte[]>("RowID")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.ToTable("ReferenceBase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ReferenceBase");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.ReferenceImage", b =>
                {
                    b.Property<int>("ReferenceID");

                    b.Property<int>("ImageID");

                    b.HasKey("ReferenceID", "ImageID");

                    b.HasIndex("ImageID");

                    b.ToTable("ReferenceImages");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.StashBase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Cataloged");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateInventoried");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime?>("DatePurchased");

                    b.Property<DateTime?>("DateVerified");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int?>("LocationID")
                        .IsRequired();

                    b.Property<string>("Notes");

                    b.Property<int?>("OID");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<byte[]>("RowID")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal?>("Value")
                        .HasColumnType("money");

                    b.Property<bool?>("WishList");

                    b.HasKey("ID");

                    b.HasIndex("LocationID");

                    b.ToTable("StashBase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("StashBase");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.StashImage", b =>
                {
                    b.Property<int>("StashID");

                    b.Property<int>("ImageID");

                    b.HasKey("StashID", "ImageID");

                    b.HasIndex("ImageID");

                    b.ToTable("StashImages");
                });

            modelBuilder.Entity("TC3Model.DataModel.Query", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Access");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<int?>("OID");

                    b.Property<string>("QueryText");

                    b.Property<byte[]>("RowID")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.ToTable("Query");
                });

            modelBuilder.Entity("TC3Model.ValidationRuleMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("HistoryID");

                    b.Property<int?>("ImageID");

                    b.Property<int?>("LocationID");

                    b.Property<string>("Message");

                    b.Property<string>("PropertyName");

                    b.Property<int?>("QueryID");

                    b.Property<int?>("ReferenceBaseID");

                    b.Property<int?>("StashBaseID");

                    b.HasKey("Id");

                    b.HasIndex("HistoryID");

                    b.HasIndex("ImageID");

                    b.HasIndex("LocationID");

                    b.HasIndex("QueryID");

                    b.HasIndex("ReferenceBaseID");

                    b.HasIndex("StashBaseID");

                    b.ToTable("ValidationRuleMessage");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.AircraftDesignation", b =>
                {
                    b.HasBaseType("TC3Model.DataModel.Classes.ReferenceBase");

                    b.Property<string>("Designation")
                        .HasMaxLength(32);

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(72);

                    b.Property<string>("Name")
                        .HasMaxLength(72);

                    b.Property<string>("Nicknames")
                        .HasMaxLength(80);

                    b.Property<string>("Notes");

                    b.Property<double?>("Number");

                    b.Property<DateTime?>("ServiceDate");

                    b.Property<string>("Type")
                        .HasMaxLength(32);

                    b.Property<string>("Version")
                        .HasMaxLength(32);

                    b.HasIndex("Designation", "ID")
                        .IsUnique()
                        .HasName("IX_AircraftDesignationsByDesignation")
                        .HasFilter("[Designation] IS NOT NULL");

                    b.ToTable("AircraftDesignations");

                    b.HasDiscriminator().HasValue("AircraftDesignation");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.BlueAngelsHistory", b =>
                {
                    b.HasBaseType("TC3Model.DataModel.Classes.ReferenceBase");

                    b.Property<string>("AircraftType")
                        .HasMaxLength(80);

                    b.Property<string>("DecalSets");

                    b.Property<string>("Decals");

                    b.Property<string>("Kits");

                    b.Property<string>("Notes")
                        .HasColumnName("BlueAngelsHistory_Notes");

                    b.Property<string>("ServiceDates")
                        .HasMaxLength(80);

                    b.ToTable("BlueAngelsHistory");

                    b.HasDiscriminator().HasValue("BlueAngelsHistory");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.Company", b =>
                {
                    b.HasBaseType("TC3Model.DataModel.Classes.ReferenceBase");

                    b.Property<string>("Account")
                        .HasMaxLength(32);

                    b.Property<string>("Address");

                    b.Property<string>("Code")
                        .HasMaxLength(32);

                    b.Property<string>("Name")
                        .HasColumnName("Company_Name")
                        .HasMaxLength(72);

                    b.Property<string>("Phone")
                        .HasMaxLength(14);

                    b.Property<string>("ProductType")
                        .HasMaxLength(32);

                    b.Property<string>("ShortName")
                        .HasMaxLength(32);

                    b.Property<string>("WebSite");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.Ship", b =>
                {
                    b.HasBaseType("TC3Model.DataModel.Classes.ReferenceBase");

                    b.Property<string>("ASWWeapons");

                    b.Property<string>("Aircraft");

                    b.Property<string>("Beam");

                    b.Property<string>("Boilers");

                    b.Property<string>("Command")
                        .HasMaxLength(80);

                    b.Property<DateTime?>("DateCommissioned");

                    b.Property<string>("Description");

                    b.Property<string>("Displacement");

                    b.Property<string>("Draft");

                    b.Property<string>("EW");

                    b.Property<string>("FireControl");

                    b.Property<string>("Guns");

                    b.Property<string>("History");

                    b.Property<string>("HomePort")
                        .HasMaxLength(80);

                    b.Property<string>("HullNumber")
                        .HasMaxLength(12);

                    b.Property<string>("InternetURL")
                        .HasMaxLength(132);

                    b.Property<string>("Length");

                    b.Property<string>("LocalURL")
                        .HasMaxLength(132);

                    b.Property<string>("Manning");

                    b.Property<string>("Missiles");

                    b.Property<string>("Name")
                        .HasColumnName("Ship_Name")
                        .HasMaxLength(80);

                    b.Property<string>("Notes")
                        .HasColumnName("Ship_Notes");

                    b.Property<double?>("Number")
                        .HasColumnName("Ship_Number");

                    b.Property<string>("Propulsion");

                    b.Property<string>("Radars");

                    b.Property<int?>("ShipClassID");

                    b.Property<int?>("ShipClassTypeID");

                    b.Property<string>("Sonars");

                    b.Property<string>("Speed")
                        .HasMaxLength(132);

                    b.Property<string>("Status")
                        .HasMaxLength(80);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(18);

                    b.HasIndex("ShipClassID");

                    b.HasIndex("ShipClassTypeID");

                    b.HasIndex("HullNumber", "ID")
                        .IsUnique()
                        .HasName("IX_ShipsByHullNumber")
                        .HasFilter("[HullNumber] IS NOT NULL");

                    b.HasIndex("Name", "ID")
                        .IsUnique()
                        .HasName("IX_ShipsByName")
                        .HasFilter("[Ship_Name] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Ship");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.ShipClass", b =>
                {
                    b.HasBaseType("TC3Model.DataModel.Classes.ReferenceBase");

                    b.Property<string>("ASWWeapons")
                        .HasColumnName("ShipClass_ASWWeapons");

                    b.Property<string>("Aircraft")
                        .HasColumnName("ShipClass_Aircraft");

                    b.Property<string>("Beam")
                        .HasColumnName("ShipClass_Beam");

                    b.Property<string>("Boilers")
                        .HasColumnName("ShipClass_Boilers");

                    b.Property<string>("Description")
                        .HasColumnName("ShipClass_Description");

                    b.Property<string>("Displacement")
                        .HasColumnName("ShipClass_Displacement");

                    b.Property<string>("Draft")
                        .HasColumnName("ShipClass_Draft");

                    b.Property<string>("EW")
                        .HasColumnName("ShipClass_EW");

                    b.Property<string>("FireControl")
                        .HasColumnName("ShipClass_FireControl");

                    b.Property<string>("Guns")
                        .HasColumnName("ShipClass_Guns");

                    b.Property<string>("Length")
                        .HasColumnName("ShipClass_Length");

                    b.Property<string>("Manning")
                        .HasColumnName("ShipClass_Manning");

                    b.Property<string>("Missiles")
                        .HasColumnName("ShipClass_Missiles");

                    b.Property<string>("Name")
                        .HasColumnName("ShipClass_Name")
                        .HasMaxLength(80);

                    b.Property<string>("Notes")
                        .HasColumnName("ShipClass_Notes");

                    b.Property<string>("Propulsion")
                        .HasColumnName("ShipClass_Propulsion");

                    b.Property<string>("Radars")
                        .HasColumnName("ShipClass_Radars");

                    b.Property<int?>("ShipClassTypeID")
                        .HasColumnName("ShipClassTypeID1");

                    b.Property<string>("Sonars")
                        .HasColumnName("ShipClass_Sonars");

                    b.Property<string>("Speed")
                        .HasColumnName("ShipClass_Speed")
                        .HasMaxLength(132);

                    b.Property<int?>("Year");

                    b.HasIndex("ShipClassTypeID");

                    b.HasIndex("Name", "ID")
                        .IsUnique()
                        .HasName("IX_ShipClassesByName")
                        .HasFilter("[ShipClass_Name] IS NOT NULL");

                    b.ToTable("ShipClass");

                    b.HasDiscriminator().HasValue("ShipClass");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.ShipClassType", b =>
                {
                    b.HasBaseType("TC3Model.DataModel.Classes.ReferenceBase");

                    b.Property<string>("Description")
                        .HasColumnName("ShipClassType_Description")
                        .HasMaxLength(80);

                    b.Property<string>("TypeCode")
                        .HasMaxLength(32);

                    b.HasIndex("Description", "ID")
                        .IsUnique()
                        .HasName("IX_ShipClassTypesByName")
                        .HasFilter("[ShipClassType_Description] IS NOT NULL");

                    b.HasIndex("TypeCode", "ID")
                        .IsUnique()
                        .HasName("IX_ShipClassTypesByType")
                        .HasFilter("[TypeCode] IS NOT NULL");

                    b.HasDiscriminator().HasValue("ShipClassType");

                    b.HasData(
                        new
                        {
                            ID = -1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Unassigned",
                            TypeCode = "XXX"
                        },
                        new
                        {
                            ID = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Heavy Armored Cruiser - Battleship prototype",
                            TypeCode = "ACR"
                        },
                        new
                        {
                            ID = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Destroyer Tenders",
                            TypeCode = "AD"
                        },
                        new
                        {
                            ID = 3,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ammunition Ships",
                            TypeCode = "AE"
                        },
                        new
                        {
                            ID = 4,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Oceanographic Research Ships",
                            TypeCode = "AG"
                        },
                        new
                        {
                            ID = 5,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Miscellaneous Command Ships",
                            TypeCode = "AGF"
                        },
                        new
                        {
                            ID = 6,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Auxiliary Research Submarines",
                            TypeCode = "AGSS"
                        },
                        new
                        {
                            ID = 7,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Oilers",
                            TypeCode = "AO"
                        },
                        new
                        {
                            ID = 8,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fast Combat Support Ships",
                            TypeCode = "AOE"
                        },
                        new
                        {
                            ID = 9,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Replenishment Oilers",
                            TypeCode = "AOR"
                        },
                        new
                        {
                            ID = 10,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "High Speed Transports",
                            TypeCode = "APD"
                        },
                        new
                        {
                            ID = 11,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Salvage Ships",
                            TypeCode = "ARS"
                        },
                        new
                        {
                            ID = 12,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Submarine Tenders",
                            TypeCode = "AS"
                        },
                        new
                        {
                            ID = 13,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Salvage and Rescue Ships",
                            TypeCode = "ATS"
                        },
                        new
                        {
                            ID = 14,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Battleships",
                            TypeCode = "BB"
                        },
                        new
                        {
                            ID = 15,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Heavy (Gun) Cruisers",
                            TypeCode = "CA"
                        },
                        new
                        {
                            ID = 16,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Guided Missile Heavy Cruisers",
                            TypeCode = "CAG"
                        },
                        new
                        {
                            ID = 17,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Large Cruisers",
                            TypeCode = "CB"
                        },
                        new
                        {
                            ID = 18,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Guided Missile Cruisers",
                            TypeCode = "CG"
                        },
                        new
                        {
                            ID = 19,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Guided Missile Cruisers (Nuclear)",
                            TypeCode = "CGN"
                        },
                        new
                        {
                            ID = 20,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Light (Gun) Cruisers",
                            TypeCode = "CL"
                        },
                        new
                        {
                            ID = 21,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Command Cruisers",
                            TypeCode = "CLC"
                        },
                        new
                        {
                            ID = 22,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Light Guided Missile Cruisers",
                            TypeCode = "CLG"
                        },
                        new
                        {
                            ID = 23,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Multi-Purpose (Fleet) Aircraft Carriers",
                            TypeCode = "CV"
                        },
                        new
                        {
                            ID = 24,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Escort Carriers",
                            TypeCode = "CVE"
                        },
                        new
                        {
                            ID = 25,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Light Carriers",
                            TypeCode = "CVL"
                        },
                        new
                        {
                            ID = 26,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Multi-Purpose Aircraft Carriers (Nuclear)",
                            TypeCode = "CVN"
                        },
                        new
                        {
                            ID = 27,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Destroyers",
                            TypeCode = "DD"
                        },
                        new
                        {
                            ID = 28,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Guided Missile Destroyers",
                            TypeCode = "DDG"
                        },
                        new
                        {
                            ID = 29,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Destroyer Escorts",
                            TypeCode = "DE"
                        },
                        new
                        {
                            ID = 30,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Post World War II Frigates",
                            TypeCode = "DL"
                        },
                        new
                        {
                            ID = 31,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Guided Missile Frigate (post WWII)",
                            TypeCode = "DLG"
                        },
                        new
                        {
                            ID = 32,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Frigates",
                            TypeCode = "FF"
                        },
                        new
                        {
                            ID = 33,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Guided Missile Frigates",
                            TypeCode = "FFG"
                        },
                        new
                        {
                            ID = 34,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Unclassified Miscellaneous Units",
                            TypeCode = "IX"
                        },
                        new
                        {
                            ID = 35,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Amphibious Command Ships",
                            TypeCode = "LCC"
                        },
                        new
                        {
                            ID = 36,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Littoral Combat Ship",
                            TypeCode = "LCS"
                        },
                        new
                        {
                            ID = 37,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Amphibious Assault Ships (general purpose)",
                            TypeCode = "LHA"
                        },
                        new
                        {
                            ID = 38,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Amphibious Assault Ships (multi-purpose)",
                            TypeCode = "LHD"
                        },
                        new
                        {
                            ID = 39,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Amphibious Cargo Ships",
                            TypeCode = "LKA"
                        },
                        new
                        {
                            ID = 40,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Amphibious Transport docks",
                            TypeCode = "LPD"
                        },
                        new
                        {
                            ID = 41,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Amphibious Assault Ships (Helicopter)",
                            TypeCode = "LPH"
                        },
                        new
                        {
                            ID = 42,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dock Landing Ships",
                            TypeCode = "LSD"
                        },
                        new
                        {
                            ID = 43,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tank Landing Ships",
                            TypeCode = "LST"
                        },
                        new
                        {
                            ID = 44,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mine Countermeasures Ships",
                            TypeCode = "MCM"
                        },
                        new
                        {
                            ID = 45,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mine Countermeasures Support Ships",
                            TypeCode = "MCS"
                        },
                        new
                        {
                            ID = 46,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Minehunters, Coastal",
                            TypeCode = "MHC"
                        },
                        new
                        {
                            ID = 47,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ocean Minesweepers",
                            TypeCode = "MSO"
                        },
                        new
                        {
                            ID = 48,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Patrol Craft",
                            TypeCode = "PC"
                        },
                        new
                        {
                            ID = 49,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Patrol Gunboats",
                            TypeCode = "PG"
                        },
                        new
                        {
                            ID = 50,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Patrol Combatants - Missile (Hydrofoil)",
                            TypeCode = "PHM"
                        },
                        new
                        {
                            ID = 51,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Submarines",
                            TypeCode = "SS"
                        },
                        new
                        {
                            ID = 52,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ballistic Missile Submarines (Nuclear)",
                            TypeCode = "SSBN"
                        },
                        new
                        {
                            ID = 53,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Submarines (Nuclear)",
                            TypeCode = "SSN"
                        },
                        new
                        {
                            ID = 54,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Training Submarines",
                            TypeCode = "SST"
                        },
                        new
                        {
                            ID = 55,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ammunition Ships (assigned to Military Sealift Command)",
                            TypeCode = "T-AE"
                        },
                        new
                        {
                            ID = 56,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Combat Store Ships (assigned to Military Sealift Command)",
                            TypeCode = "T-AFS"
                        },
                        new
                        {
                            ID = 57,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Oceanographic Research Ships",
                            TypeCode = "T-AG"
                        },
                        new
                        {
                            ID = 58,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Oilers (assigned to Military Sealift Command)",
                            TypeCode = "T-AO"
                        },
                        new
                        {
                            ID = 59,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fast Combat Support Ships (assigned to Military Sealift Command)",
                            TypeCode = "T-AOE"
                        },
                        new
                        {
                            ID = 60,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Salvage Ships (assigned to Military Sealift Command)",
                            TypeCode = "T-ARS"
                        },
                        new
                        {
                            ID = 61,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Submarine Tenders (assigned to Military Sealift Command)",
                            TypeCode = "T-AS"
                        },
                        new
                        {
                            ID = 62,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Amphibious Cargo Ships (assigned to Military Sealift Command)",
                            TypeCode = "T-LKA"
                        });
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.Book", b =>
                {
                    b.HasBaseType("TC3Model.DataModel.Classes.StashBase");

                    b.Property<string>("AlphaSort")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("ISBN")
                        .HasMaxLength(24);

                    b.Property<string>("MediaFormat")
                        .HasMaxLength(80);

                    b.Property<string>("Misc")
                        .HasMaxLength(32);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(132);

                    b.HasIndex("AlphaSort", "ID")
                        .IsUnique()
                        .HasName("IX_BooksByAlphaSort")
                        .HasFilter("[AlphaSort] IS NOT NULL");

                    b.HasIndex("Author", "ID")
                        .IsUnique()
                        .HasName("IX_BooksByAuthor")
                        .HasFilter("[Author] IS NOT NULL");

                    b.HasIndex("ISBN", "ID")
                        .IsUnique()
                        .HasName("IX_BooksByISBN")
                        .HasFilter("[ISBN] IS NOT NULL");

                    b.HasIndex("Subject", "ID")
                        .IsUnique()
                        .HasName("IX_BooksBySubject")
                        .HasFilter("[Subject] IS NOT NULL");

                    b.HasIndex("Title", "ID")
                        .IsUnique()
                        .HasName("IX_BooksByTitle")
                        .HasFilter("[Title] IS NOT NULL");

                    b.HasIndex("MediaFormat", "AlphaSort", "ID")
                        .IsUnique()
                        .HasName("IX_BooksByFormat")
                        .HasFilter("[MediaFormat] IS NOT NULL AND [AlphaSort] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Book");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.Collectable", b =>
                {
                    b.HasBaseType("TC3Model.DataModel.Classes.StashBase");

                    b.Property<string>("Condition")
                        .HasMaxLength(80);

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(80);

                    b.Property<string>("Name")
                        .HasMaxLength(132);

                    b.Property<bool>("OutOfProduction");

                    b.Property<string>("Reference")
                        .HasMaxLength(32);

                    b.Property<string>("Series")
                        .HasMaxLength(80);

                    b.Property<string>("Type")
                        .HasMaxLength(80);

                    b.HasIndex("Series", "Type", "Reference", "ID")
                        .IsUnique()
                        .HasName("IX_CollectablesBySeries")
                        .HasFilter("[Series] IS NOT NULL AND [Type] IS NOT NULL AND [Reference] IS NOT NULL");

                    b.HasIndex("Type", "Series", "Reference", "ID")
                        .IsUnique()
                        .HasName("IX_CollectablesByType")
                        .HasFilter("[Type] IS NOT NULL AND [Series] IS NOT NULL AND [Reference] IS NOT NULL");

                    b.HasIndex("Name", "Series", "Type", "Reference", "ID")
                        .IsUnique()
                        .HasName("IX_CollectablesByName")
                        .HasFilter("[Name] IS NOT NULL AND [Series] IS NOT NULL AND [Type] IS NOT NULL AND [Reference] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Collectable");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.Decal", b =>
                {
                    b.HasBaseType("TC3Model.DataModel.Classes.StashBase");

                    b.Property<string>("Designation")
                        .HasMaxLength(132);

                    b.Property<string>("Manufacturer")
                        .HasColumnName("Decal_Manufacturer")
                        .HasMaxLength(132);

                    b.Property<string>("Name")
                        .HasColumnName("Decal_Name")
                        .HasMaxLength(256);

                    b.Property<string>("Nation")
                        .HasMaxLength(132);

                    b.Property<string>("ProductCatalog")
                        .HasMaxLength(132);

                    b.Property<string>("Reference")
                        .HasColumnName("Decal_Reference")
                        .HasMaxLength(132);

                    b.Property<string>("Scale")
                        .HasMaxLength(12);

                    b.Property<string>("Type")
                        .HasColumnName("Decal_Type")
                        .HasMaxLength(132);

                    b.HasIndex("Manufacturer", "ID")
                        .IsUnique()
                        .HasName("IX_DecalsByManufacturer")
                        .HasFilter("[Decal_Manufacturer] IS NOT NULL");

                    b.HasIndex("Name", "Scale", "ID")
                        .IsUnique()
                        .HasName("IX_DecalsByName")
                        .HasFilter("[Decal_Name] IS NOT NULL AND [Scale] IS NOT NULL");

                    b.HasIndex("Type", "Scale", "ID")
                        .IsUnique()
                        .HasName("IX_DecalsByType")
                        .HasFilter("[Decal_Type] IS NOT NULL AND [Scale] IS NOT NULL");

                    b.HasIndex("Scale", "Type", "Manufacturer", "ID")
                        .IsUnique()
                        .HasName("IX_DecalsByScale")
                        .HasFilter("[Scale] IS NOT NULL AND [Decal_Type] IS NOT NULL AND [Decal_Manufacturer] IS NOT NULL");

                    b.HasIndex("Type", "Designation", "Scale", "ID")
                        .IsUnique()
                        .HasName("IX_DecalsByDesignation")
                        .HasFilter("[Decal_Type] IS NOT NULL AND [Designation] IS NOT NULL AND [Scale] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Decal");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.DetailSet", b =>
                {
                    b.HasBaseType("TC3Model.DataModel.Classes.StashBase");

                    b.Property<string>("Designation")
                        .HasColumnName("DetailSet_Designation")
                        .HasMaxLength(132);

                    b.Property<string>("Manufacturer")
                        .HasColumnName("DetailSet_Manufacturer")
                        .HasMaxLength(132);

                    b.Property<string>("Name")
                        .HasColumnName("DetailSet_Name")
                        .HasMaxLength(256);

                    b.Property<string>("Nation")
                        .HasColumnName("DetailSet_Nation")
                        .HasMaxLength(132);

                    b.Property<string>("ProductCatalog")
                        .HasColumnName("DetailSet_ProductCatalog")
                        .HasMaxLength(132);

                    b.Property<string>("Reference")
                        .HasColumnName("DetailSet_Reference")
                        .HasMaxLength(132);

                    b.Property<string>("Scale")
                        .HasColumnName("DetailSet_Scale")
                        .HasMaxLength(12);

                    b.Property<string>("Type")
                        .HasColumnName("DetailSet_Type")
                        .HasMaxLength(132);

                    b.HasIndex("Manufacturer", "ID")
                        .IsUnique()
                        .HasName("IX_DetailSetsByManufacturer")
                        .HasFilter("[DetailSet_Manufacturer] IS NOT NULL");

                    b.HasIndex("Name", "Scale", "ID")
                        .IsUnique()
                        .HasName("IX_DetailSetsByName")
                        .HasFilter("[DetailSet_Name] IS NOT NULL AND [DetailSet_Scale] IS NOT NULL");

                    b.HasIndex("Type", "Scale", "ID")
                        .IsUnique()
                        .HasName("IX_DetailSetsByType")
                        .HasFilter("[DetailSet_Type] IS NOT NULL AND [DetailSet_Scale] IS NOT NULL");

                    b.HasIndex("Scale", "Type", "Manufacturer", "ID")
                        .IsUnique()
                        .HasName("IX_DetailSetsByScale")
                        .HasFilter("[DetailSet_Scale] IS NOT NULL AND [DetailSet_Type] IS NOT NULL AND [DetailSet_Manufacturer] IS NOT NULL");

                    b.HasIndex("Type", "Designation", "Scale", "ID")
                        .IsUnique()
                        .HasName("IX_DetailSetsByDesignation")
                        .HasFilter("[DetailSet_Type] IS NOT NULL AND [DetailSet_Designation] IS NOT NULL AND [DetailSet_Scale] IS NOT NULL");

                    b.HasDiscriminator().HasValue("DetailSet");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.Episode", b =>
                {
                    b.HasBaseType("TC3Model.DataModel.Classes.StashBase");

                    b.Property<DateTime?>("DateReleased");

                    b.Property<string>("Distributor")
                        .HasMaxLength(80);

                    b.Property<string>("MediaFormat")
                        .HasColumnName("Episode_MediaFormat")
                        .HasMaxLength(80);

                    b.Property<string>("Number")
                        .HasMaxLength(32);

                    b.Property<string>("Series")
                        .HasColumnName("Episode_Series")
                        .HasMaxLength(80);

                    b.Property<bool?>("StoreBought");

                    b.Property<string>("Subject")
                        .HasColumnName("Episode_Subject")
                        .HasMaxLength(80);

                    b.Property<bool?>("Taped");

                    b.Property<string>("Title")
                        .HasColumnName("Episode_Title")
                        .HasMaxLength(80);

                    b.Property<bool?>("WMV");

                    b.HasIndex("Subject", "ID")
                        .IsUnique()
                        .HasName("IX_EpisodesBySubject")
                        .HasFilter("[Episode_Subject] IS NOT NULL");

                    b.HasIndex("Series", "Number", "ID")
                        .IsUnique()
                        .HasName("IX_EpisodesBySeries")
                        .HasFilter("[Episode_Series] IS NOT NULL AND [Number] IS NOT NULL");

                    b.HasIndex("MediaFormat", "Series", "Number", "ID")
                        .IsUnique()
                        .HasName("IX_EpisodesByFormat")
                        .HasFilter("[Episode_MediaFormat] IS NOT NULL AND [Episode_Series] IS NOT NULL AND [Number] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Episode");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.FinishingProduct", b =>
                {
                    b.HasBaseType("TC3Model.DataModel.Classes.StashBase");

                    b.Property<double?>("Count");

                    b.Property<string>("Manufacturer")
                        .HasColumnName("FinishingProduct_Manufacturer")
                        .HasMaxLength(80);

                    b.Property<string>("Name")
                        .HasColumnName("FinishingProduct_Name")
                        .HasMaxLength(72);

                    b.Property<string>("ProductCatalog")
                        .HasColumnName("FinishingProduct_ProductCatalog")
                        .HasMaxLength(80);

                    b.Property<string>("Reference")
                        .HasColumnName("FinishingProduct_Reference")
                        .HasMaxLength(32);

                    b.Property<string>("Type")
                        .HasColumnName("FinishingProduct_Type")
                        .HasMaxLength(32);

                    b.HasDiscriminator().HasValue("FinishingProduct");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.Kit", b =>
                {
                    b.HasBaseType("TC3Model.DataModel.Classes.StashBase");

                    b.Property<string>("Condition")
                        .HasColumnName("Kit_Condition")
                        .HasMaxLength(132);

                    b.Property<int?>("DecalID");

                    b.Property<string>("Designation")
                        .HasColumnName("Kit_Designation")
                        .HasMaxLength(132);

                    b.Property<int?>("DetailSetID");

                    b.Property<string>("Era")
                        .HasMaxLength(80);

                    b.Property<string>("Manufacturer")
                        .HasColumnName("Kit_Manufacturer")
                        .HasMaxLength(132);

                    b.Property<string>("Name")
                        .HasColumnName("Kit_Name")
                        .HasMaxLength(256);

                    b.Property<string>("Nation")
                        .HasColumnName("Kit_Nation")
                        .HasMaxLength(132);

                    b.Property<bool>("OutOfProduction")
                        .HasColumnName("Kit_OutOfProduction");

                    b.Property<string>("ProductCatalog")
                        .HasColumnName("Kit_ProductCatalog")
                        .HasMaxLength(132);

                    b.Property<string>("Reference")
                        .HasColumnName("Kit_Reference")
                        .HasMaxLength(132);

                    b.Property<string>("Scale")
                        .HasColumnName("Kit_Scale")
                        .HasMaxLength(12);

                    b.Property<string>("Service")
                        .HasMaxLength(132);

                    b.Property<string>("Type")
                        .HasColumnName("Kit_Type")
                        .HasMaxLength(132);

                    b.HasIndex("DecalID");

                    b.HasIndex("DetailSetID");

                    b.HasIndex("Manufacturer", "ID")
                        .IsUnique()
                        .HasName("IX_KitsByManufacturer")
                        .HasFilter("[Kit_Manufacturer] IS NOT NULL");

                    b.HasIndex("Name", "Scale", "ID")
                        .IsUnique()
                        .HasName("IX_KitsByName")
                        .HasFilter("[Kit_Name] IS NOT NULL AND [Kit_Scale] IS NOT NULL");

                    b.HasIndex("Type", "Scale", "ID")
                        .IsUnique()
                        .HasName("IX_KitsByType")
                        .HasFilter("[Kit_Type] IS NOT NULL AND [Kit_Scale] IS NOT NULL");

                    b.HasIndex("Nation", "Service", "Era", "ID")
                        .IsUnique()
                        .HasName("IX_KitsByNationServiceEra")
                        .HasFilter("[Kit_Nation] IS NOT NULL AND [Service] IS NOT NULL AND [Era] IS NOT NULL");

                    b.HasIndex("Scale", "Type", "Manufacturer", "ID")
                        .IsUnique()
                        .HasName("IX_KitsByScale")
                        .HasFilter("[Kit_Scale] IS NOT NULL AND [Kit_Type] IS NOT NULL AND [Kit_Manufacturer] IS NOT NULL");

                    b.HasIndex("Type", "Designation", "Scale", "ID")
                        .IsUnique()
                        .HasName("IX_KitsByDesignation")
                        .HasFilter("[Kit_Type] IS NOT NULL AND [Kit_Designation] IS NOT NULL AND [Kit_Scale] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Kit");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.Movie", b =>
                {
                    b.HasBaseType("TC3Model.DataModel.Classes.StashBase");

                    b.Property<string>("AlphaSort")
                        .HasColumnName("Movie_AlphaSort")
                        .HasMaxLength(80);

                    b.Property<DateTime?>("DateReleased")
                        .HasColumnName("Movie_DateReleased");

                    b.Property<string>("Distributor")
                        .HasColumnName("Movie_Distributor")
                        .HasMaxLength(80);

                    b.Property<string>("MediaFormat")
                        .HasColumnName("Movie_MediaFormat")
                        .HasMaxLength(80);

                    b.Property<bool?>("StoreBought")
                        .HasColumnName("Movie_StoreBought");

                    b.Property<string>("Subject")
                        .HasColumnName("Movie_Subject")
                        .HasMaxLength(80);

                    b.Property<string>("Title")
                        .HasColumnName("Movie_Title")
                        .HasMaxLength(80);

                    b.Property<bool?>("WMV")
                        .HasColumnName("Movie_WMV");

                    b.HasIndex("AlphaSort", "MediaFormat", "ID")
                        .IsUnique()
                        .HasName("IX_MoviesBySort")
                        .HasFilter("[Movie_AlphaSort] IS NOT NULL AND [Movie_MediaFormat] IS NOT NULL");

                    b.HasIndex("MediaFormat", "AlphaSort", "ID")
                        .IsUnique()
                        .HasName("IX_MoviesByFormat")
                        .HasFilter("[Movie_MediaFormat] IS NOT NULL AND [Movie_AlphaSort] IS NOT NULL");

                    b.HasIndex("Subject", "Title", "ID")
                        .IsUnique()
                        .HasName("IX_MoviesBySubject")
                        .HasFilter("[Movie_Subject] IS NOT NULL AND [Movie_Title] IS NOT NULL");

                    b.HasIndex("Title", "MediaFormat", "ID")
                        .IsUnique()
                        .HasName("IX_MoviesByTitle")
                        .HasFilter("[Movie_Title] IS NOT NULL AND [Movie_MediaFormat] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Movie");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.Music", b =>
                {
                    b.HasBaseType("TC3Model.DataModel.Classes.StashBase");

                    b.Property<string>("AlphaSort")
                        .HasColumnName("Music_AlphaSort")
                        .HasMaxLength(80);

                    b.Property<string>("Artist")
                        .HasMaxLength(80);

                    b.Property<string>("MediaFormat")
                        .HasColumnName("Music_MediaFormat")
                        .HasMaxLength(80);

                    b.Property<string>("Title")
                        .HasColumnName("Music_Title")
                        .HasMaxLength(80);

                    b.Property<string>("Type")
                        .HasColumnName("Music_Type")
                        .HasMaxLength(80);

                    b.Property<int?>("Year");

                    b.HasIndex("AlphaSort", "ID")
                        .IsUnique()
                        .HasName("IX_MusicByAlphaSort")
                        .HasFilter("[Music_AlphaSort] IS NOT NULL");

                    b.HasIndex("Artist", "Year", "MediaFormat", "ID")
                        .IsUnique()
                        .HasName("IX_MusicByArtist")
                        .HasFilter("[Artist] IS NOT NULL AND [Year] IS NOT NULL AND [Music_MediaFormat] IS NOT NULL");

                    b.HasIndex("MediaFormat", "Artist", "Year", "ID")
                        .IsUnique()
                        .HasName("IX_MusicByFormat")
                        .HasFilter("[Music_MediaFormat] IS NOT NULL AND [Artist] IS NOT NULL AND [Year] IS NOT NULL");

                    b.HasIndex("Type", "Artist", "Year", "MediaFormat", "ID")
                        .IsUnique()
                        .HasName("IX_MusicByType")
                        .HasFilter("[Music_Type] IS NOT NULL AND [Artist] IS NOT NULL AND [Year] IS NOT NULL AND [Music_MediaFormat] IS NOT NULL");

                    b.ToTable("Music");

                    b.HasDiscriminator().HasValue("Music");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.Rocket", b =>
                {
                    b.HasBaseType("TC3Model.DataModel.Classes.StashBase");

                    b.Property<string>("Designation")
                        .HasColumnName("Rocket_Designation")
                        .HasMaxLength(32);

                    b.Property<string>("Manufacturer")
                        .HasColumnName("Rocket_Manufacturer")
                        .HasMaxLength(80);

                    b.Property<string>("Name")
                        .HasColumnName("Rocket_Name")
                        .HasMaxLength(72);

                    b.Property<string>("Nation")
                        .HasColumnName("Rocket_Nation")
                        .HasMaxLength(32);

                    b.Property<string>("ProductCatalog")
                        .HasColumnName("Rocket_ProductCatalog")
                        .HasMaxLength(80);

                    b.Property<string>("Reference")
                        .HasColumnName("Rocket_Reference")
                        .HasMaxLength(32);

                    b.Property<string>("Scale")
                        .HasColumnName("Rocket_Scale")
                        .HasMaxLength(12);

                    b.Property<string>("Type")
                        .HasColumnName("Rocket_Type")
                        .HasMaxLength(32);

                    b.HasDiscriminator().HasValue("Rocket");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.Software", b =>
                {
                    b.HasBaseType("TC3Model.DataModel.Classes.StashBase");

                    b.Property<string>("AlphaSort")
                        .IsRequired()
                        .HasColumnName("Software_AlphaSort")
                        .HasMaxLength(132);

                    b.Property<string>("CDkey")
                        .HasMaxLength(80);

                    b.Property<DateTime?>("DateReleased")
                        .HasColumnName("Software_DateReleased");

                    b.Property<string>("Developer")
                        .HasMaxLength(80);

                    b.Property<string>("ISBN")
                        .HasColumnName("Software_ISBN")
                        .HasMaxLength(24);

                    b.Property<string>("MediaFormat")
                        .HasColumnName("Software_MediaFormat")
                        .HasMaxLength(80);

                    b.Property<string>("Platform")
                        .HasMaxLength(32);

                    b.Property<string>("Publisher")
                        .HasMaxLength(80);

                    b.Property<string>("Title")
                        .HasColumnName("Software_Title")
                        .HasMaxLength(80);

                    b.Property<string>("Type")
                        .HasColumnName("Software_Type")
                        .HasMaxLength(32);

                    b.Property<string>("Version")
                        .HasMaxLength(32);

                    b.HasIndex("AlphaSort", "ID")
                        .IsUnique()
                        .HasName("IX_SoftwareByAlphaSort")
                        .HasFilter("[Software_AlphaSort] IS NOT NULL");

                    b.HasIndex("Platform", "AlphaSort", "ID")
                        .IsUnique()
                        .HasName("IX_SoftwareByPlatform")
                        .HasFilter("[Platform] IS NOT NULL AND [Software_AlphaSort] IS NOT NULL");

                    b.HasIndex("Type", "AlphaSort", "ID")
                        .IsUnique()
                        .HasName("IX_SoftwareByType")
                        .HasFilter("[Software_Type] IS NOT NULL AND [Software_AlphaSort] IS NOT NULL");

                    b.ToTable("Software");

                    b.HasDiscriminator().HasValue("Software");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.Special", b =>
                {
                    b.HasBaseType("TC3Model.DataModel.Classes.StashBase");

                    b.Property<string>("AlphaSort")
                        .HasColumnName("Special_AlphaSort")
                        .HasMaxLength(80);

                    b.Property<DateTime?>("DateReleased")
                        .HasColumnName("Special_DateReleased");

                    b.Property<string>("Distributor")
                        .HasColumnName("Special_Distributor")
                        .HasMaxLength(80);

                    b.Property<string>("MediaFormat")
                        .HasColumnName("Special_MediaFormat")
                        .HasMaxLength(80);

                    b.Property<bool?>("StoreBought")
                        .HasColumnName("Special_StoreBought");

                    b.Property<string>("Subject")
                        .HasColumnName("Special_Subject")
                        .HasMaxLength(80);

                    b.Property<string>("Title")
                        .HasColumnName("Special_Title")
                        .HasMaxLength(80);

                    b.Property<bool?>("WMV")
                        .HasColumnName("Special_WMV");

                    b.HasIndex("AlphaSort", "MediaFormat", "ID")
                        .IsUnique()
                        .HasName("IX_SpecialsBySort")
                        .HasFilter("[Special_AlphaSort] IS NOT NULL AND [Special_MediaFormat] IS NOT NULL");

                    b.HasIndex("MediaFormat", "AlphaSort", "ID")
                        .IsUnique()
                        .HasName("IX_SpecialsByFormat")
                        .HasFilter("[Special_MediaFormat] IS NOT NULL AND [Special_AlphaSort] IS NOT NULL");

                    b.HasIndex("Subject", "Title", "ID")
                        .IsUnique()
                        .HasName("IX_SpecialsBySubject")
                        .HasFilter("[Special_Subject] IS NOT NULL AND [Special_Title] IS NOT NULL");

                    b.HasIndex("Title", "MediaFormat", "ID")
                        .IsUnique()
                        .HasName("IX_SpecialsByTitle")
                        .HasFilter("[Special_Title] IS NOT NULL AND [Special_MediaFormat] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Special");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.Tool", b =>
                {
                    b.HasBaseType("TC3Model.DataModel.Classes.StashBase");

                    b.Property<string>("Manufacturer")
                        .HasColumnName("Tool_Manufacturer")
                        .HasMaxLength(80);

                    b.Property<string>("Name")
                        .HasColumnName("Tool_Name")
                        .HasMaxLength(132);

                    b.Property<string>("ProductCatalog")
                        .HasColumnName("Tool_ProductCatalog")
                        .HasMaxLength(80);

                    b.Property<string>("Reference")
                        .HasColumnName("Tool_Reference")
                        .HasMaxLength(32);

                    b.HasDiscriminator().HasValue("Tool");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.Train", b =>
                {
                    b.HasBaseType("TC3Model.DataModel.Classes.StashBase");

                    b.Property<string>("Line")
                        .HasMaxLength(72);

                    b.Property<string>("Manufacturer")
                        .HasColumnName("Train_Manufacturer")
                        .HasMaxLength(80);

                    b.Property<string>("Name")
                        .HasColumnName("Train_Name")
                        .HasMaxLength(132);

                    b.Property<string>("ProductCatalog")
                        .HasColumnName("Train_ProductCatalog")
                        .HasMaxLength(80);

                    b.Property<string>("Reference")
                        .HasColumnName("Train_Reference")
                        .HasMaxLength(32);

                    b.Property<string>("Scale")
                        .HasColumnName("Train_Scale")
                        .HasMaxLength(12);

                    b.Property<string>("Type")
                        .HasColumnName("Train_Type")
                        .HasMaxLength(32);

                    b.HasDiscriminator().HasValue("Train");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.ReferenceImage", b =>
                {
                    b.HasOne("TC3Model.DataModel.Classes.Image", "Image")
                        .WithMany("ReferenceImages")
                        .HasForeignKey("ImageID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TC3Model.DataModel.Classes.ReferenceBase", "Reference")
                        .WithMany()
                        .HasForeignKey("ReferenceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.StashBase", b =>
                {
                    b.HasOne("TC3Model.DataModel.Classes.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.StashImage", b =>
                {
                    b.HasOne("TC3Model.DataModel.Classes.Image", "Image")
                        .WithMany("StashImages")
                        .HasForeignKey("ImageID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TC3Model.DataModel.Classes.StashBase", "Stash")
                        .WithMany()
                        .HasForeignKey("StashID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TC3Model.ValidationRuleMessage", b =>
                {
                    b.HasOne("TC3Model.DataModel.Classes.History")
                        .WithMany("ValidationRuleMessages")
                        .HasForeignKey("HistoryID");

                    b.HasOne("TC3Model.DataModel.Classes.Image")
                        .WithMany("ValidationRuleMessages")
                        .HasForeignKey("ImageID");

                    b.HasOne("TC3Model.DataModel.Classes.Location")
                        .WithMany("ValidationRuleMessages")
                        .HasForeignKey("LocationID");

                    b.HasOne("TC3Model.DataModel.Query")
                        .WithMany("ValidationRuleMessages")
                        .HasForeignKey("QueryID");

                    b.HasOne("TC3Model.DataModel.Classes.ReferenceBase")
                        .WithMany("ValidationRuleMessages")
                        .HasForeignKey("ReferenceBaseID");

                    b.HasOne("TC3Model.DataModel.Classes.StashBase")
                        .WithMany("ValidationRuleMessages")
                        .HasForeignKey("StashBaseID");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.Ship", b =>
                {
                    b.HasOne("TC3Model.DataModel.Classes.ShipClass")
                        .WithMany("Ships")
                        .HasForeignKey("ShipClassID");

                    b.HasOne("TC3Model.DataModel.Classes.ShipClassType")
                        .WithMany("Ships")
                        .HasForeignKey("ShipClassTypeID");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.ShipClass", b =>
                {
                    b.HasOne("TC3Model.DataModel.Classes.ShipClassType")
                        .WithMany("ShipClasses")
                        .HasForeignKey("ShipClassTypeID");
                });

            modelBuilder.Entity("TC3Model.DataModel.Classes.Kit", b =>
                {
                    b.HasOne("TC3Model.DataModel.Classes.Decal", "Decal")
                        .WithMany("Kits")
                        .HasForeignKey("DecalID");

                    b.HasOne("TC3Model.DataModel.Classes.DetailSet", "DetailSet")
                        .WithMany("Kits")
                        .HasForeignKey("DetailSetID");
                });
#pragma warning restore 612, 618
        }
    }
}
